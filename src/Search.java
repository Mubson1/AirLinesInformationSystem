
import airlines.information.system.ImportMethodClass;
import java.awt.Desktop;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author [Shreesu Thapa, Avigya Aryal, Mubson Karki] - C13
 */


//This class is used for searching the flight details. Also, this class helps in searching for the flight details as per user input.
public class Search extends javax.swing.JFrame {
    
    DefaultTableModel tab;
    int initialIndex, finalIndex;
    
    //Initializing a string list for adding them in JComboBox
    String[] cities = {"Select your destination","Atlanta","Bangkok","Beijing","Chicago","Dallas","Denver","Dubai","Istabnul","Kathmandu","Kolkata",
                        "London","Los Angeles","Moscow","Madrid","New York","Osaka","Paris","Seoul","Shanghai","Tokyo"};
    
    ImportMethodClass importVar = new ImportMethodClass();
    
    public Search() throws IOException {
        initComponents();
        searchDestinationComboBox.setVisible(false);
        searchDestinationButton.setVisible(false);
        searchClassButton.setVisible(false);
        searchClassComboBox.setVisible(false);
      
        try {
            BufferedReader flightFile = new BufferedReader(new FileReader(new File(".\\flightInfo.csv")));
            
            ArrayList<String[]> record = new ArrayList<String[]>();
            
            String line = null;
            int row = 0;
            
            //While loop add the data from the csv file to the array list.
            while ((line = flightFile.readLine()) != null) {
                
                //discarding the first row of the csv file.
                if (row == 0) {
                    row++;
                    continue;
                }
                String[] splitted = line.split(",");
                record.add(splitted);
            }
            flightFile.close();
            
            String[] columNames = new String[]{"Flight Code", "Flight Name", "From City", "To City", "Flight Date", "Flight Time", "Capacity", "Flight Class", "Price", "Description"};

            Object[][] content = new Object[record.size()][10];
            
            for (int i = 0; i < record.size(); i++) {
                content[i][0] = record.get(i)[0];
                content[i][1] = record.get(i)[1];
                content[i][2] = record.get(i)[2];
                content[i][3] = record.get(i)[3];
                content[i][4] = record.get(i)[4];
                content[i][5] = record.get(i)[5];
                content[i][6] = record.get(i)[6];
                content[i][7] = record.get(i)[7];
                content[i][8] = record.get(i)[8];
                content[i][9] = record.get(i)[9];
            }
            
            tab = new DefaultTableModel(content, columNames);
            searchPageTable.setModel(tab);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBy_ButtonGroup = new javax.swing.ButtonGroup();
        blackPanel = new javax.swing.JPanel();
        airlinesISHeadingLabel = new javax.swing.JLabel();
        loginNavigationLabel = new javax.swing.JLabel();
        searchNavigationLabel = new javax.swing.JLabel();
        exitNavigationLabel = new javax.swing.JLabel();
        searchContentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchPageTable = new javax.swing.JTable();
        searchDestination_radioButton = new javax.swing.JRadioButton();
        searchByPanel = new javax.swing.JPanel();
        searchDestinationComboBox = new javax.swing.JComboBox<>();
        searchDestinationButton = new javax.swing.JButton();
        searchClassComboBox = new javax.swing.JComboBox<>();
        searchClassButton = new javax.swing.JButton();
        searchClass_radioButton = new javax.swing.JRadioButton();
        searchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        contentHeadingLabel = new javax.swing.JLabel();
        picturedLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFileMenuitem = new javax.swing.JMenuItem();
        existingFileMenuitem = new javax.swing.JMenuItem();
        exitMenuitem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuitem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        blackPanel.setBackground(new java.awt.Color(0, 0, 0));
        blackPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        airlinesISHeadingLabel.setFont(new java.awt.Font("Times New Roman", 1, 35)); // NOI18N
        airlinesISHeadingLabel.setForeground(new java.awt.Color(255, 215, 0));
        airlinesISHeadingLabel.setText("Airlines Information System");
        airlinesISHeadingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                airlinesISHeadingLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                airlinesISHeadingLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                airlinesISHeadingLabelMouseExited(evt);
            }
        });
        blackPanel.add(airlinesISHeadingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        loginNavigationLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        loginNavigationLabel.setForeground(new java.awt.Color(255, 255, 255));
        loginNavigationLabel.setText("<html> <u> Login </u> <html>");
        loginNavigationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginNavigationLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loginNavigationLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loginNavigationLabelMouseExited(evt);
            }
        });
        blackPanel.add(loginNavigationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 50, -1, -1));

        searchNavigationLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        searchNavigationLabel.setForeground(new java.awt.Color(255, 255, 255));
        searchNavigationLabel.setText("<html>\n<u>\nSearch Flight\n</u>\n<html>");
        searchNavigationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchNavigationLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchNavigationLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchNavigationLabelMouseExited(evt);
            }
        });
        blackPanel.add(searchNavigationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 50, -1, -1));

        exitNavigationLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        exitNavigationLabel.setForeground(new java.awt.Color(255, 255, 255));
        exitNavigationLabel.setText("<html> <u> Exit </u> <html>");
        exitNavigationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitNavigationLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitNavigationLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitNavigationLabelMouseExited(evt);
            }
        });
        blackPanel.add(exitNavigationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 50, -1, -1));

        searchContentPanel.setBackground(new java.awt.Color(204, 255, 204));
        searchContentPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 0), 6, true));
        searchContentPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchPageTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchPageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Flight Code", "Flight Name", "From City", "To City", "Flight Date", "Flight Time", "Capacity", "Flight Class", "Price", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchPageTable.setRowHeight(30);
        searchPageTable.setRowMargin(5);
        searchPageTable.setSelectionBackground(new java.awt.Color(51, 153, 255));
        searchPageTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(searchPageTable);

        searchContentPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 900, 270));

        searchBy_ButtonGroup.add(searchDestination_radioButton);
        searchDestination_radioButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchDestination_radioButton.setText("Search by Destination");
        searchDestination_radioButton.setOpaque(false);
        searchDestination_radioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDestination_radioButtonActionPerformed(evt);
            }
        });
        searchContentPanel.add(searchDestination_radioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 180, -1));

        searchByPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 0), 4, true), "Search Your Flight Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 3, 12))); // NOI18N
        searchByPanel.setOpaque(false);
        searchByPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchDestinationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(cities));
        searchByPanel.add(searchDestinationComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 210, 40));

        searchDestinationButton.setBackground(new java.awt.Color(204, 255, 204));
        searchDestinationButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchDestinationButton.setText("<html>Search<br> Destination</html>");
        searchDestinationButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 4, true));
        searchDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDestinationButtonActionPerformed(evt);
            }
        });
        searchByPanel.add(searchDestinationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 100, 60));

        searchClassComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Your Flight Class", "A", "B", "C", "D" }));
        searchByPanel.add(searchClassComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 210, 40));

        searchClassButton.setBackground(new java.awt.Color(204, 255, 204));
        searchClassButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchClassButton.setText("<html>Search<br> Class</html>");
        searchClassButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 4, true));
        searchClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchClassButtonActionPerformed(evt);
            }
        });
        searchByPanel.add(searchClassButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 100, 60));

        searchContentPanel.add(searchByPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 350, 90));

        searchBy_ButtonGroup.add(searchClass_radioButton);
        searchClass_radioButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchClass_radioButton.setText("Search by Class");
        searchClass_radioButton.setOpaque(false);
        searchClass_radioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchClass_radioButtonActionPerformed(evt);
            }
        });
        searchContentPanel.add(searchClass_radioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, 170, -1));

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 0), 4, true), "Search By Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 3, 12))); // NOI18N
        searchPanel.setOpaque(false);
        searchPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchButton.setBackground(new java.awt.Color(204, 255, 204));
        searchButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchButton.setText("Search");
        searchButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 51), 4, true));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        searchPanel.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 90, 40));
        searchPanel.add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 150, 40));

        searchContentPanel.add(searchPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 280, 70));

        contentHeadingLabel.setFont(new java.awt.Font("Arial Black", 3, 48)); // NOI18N
        contentHeadingLabel.setText("<html><u>Search Flight</U></html>");
        searchContentPanel.add(contentHeadingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 380, -1));

        blackPanel.add(searchContentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 940, 460));

        picturedLabel.setBackground(new java.awt.Color(255, 255, 255));
        picturedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/baHpXzf-high-resolution-aircraft-wallpapers.jpg"))); // NOI18N
        picturedLabel.setOpaque(true);
        picturedLabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                picturedLabelPropertyChange(evt);
            }
        });
        blackPanel.add(picturedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 1100, 550));

        getContentPane().add(blackPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 700));

        fileMenu.setText("File");

        newFileMenuitem.setText("Open New File");
        newFileMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMenuitemActionPerformed(evt);
            }
        });
        fileMenu.add(newFileMenuitem);

        existingFileMenuitem.setText("Open Saved File");
        existingFileMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingFileMenuitemActionPerformed(evt);
            }
        });
        fileMenu.add(existingFileMenuitem);

        exitMenuitem.setText("Exit");
        exitMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuitemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuitem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuitem.setText("About");
        aboutMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuitemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuitem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

 
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //Initializing ArrayList in String datatype for storing details of a column.
        ArrayList<String> flightCode = new ArrayList();
        ArrayList<String> flightName = new ArrayList();
        ArrayList<String> fromCity = new ArrayList();
        ArrayList<String> toCity = new ArrayList();
        ArrayList<String> flightDate = new ArrayList();
        ArrayList<String> flightTime = new ArrayList();
        ArrayList<String> flightCapacity = new ArrayList();
        ArrayList<String> flightClass = new ArrayList();
        ArrayList<String> flightPrice = new ArrayList();
        ArrayList<String> flightDescription = new ArrayList();
        
        String userInput = searchField.getText();
        int rowCount = searchPageTable.getRowCount();
        
        int rowIndex = 0;
        boolean emptyRow = false;

        //Do while loop for counting the number of rows with data
        do {
            String data = (String) searchPageTable.getValueAt(rowIndex, 0);
            
            if (data != null && data.length() != 0) {
                rowIndex++;
            } 
            else {
                emptyRow = true;
            }
        } while (rowIndex < rowCount && !emptyRow);

        /*
            Here, a total of 10 for loops are created.
            These loops adds the flight details from each column to their respective array list.
        */
        for (int i = 0; i < rowIndex; i++) {
            String code = (String) searchPageTable.getValueAt(i, 0);
            flightCode.add(code);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String name = (String) searchPageTable.getValueAt(i, 1);
            flightName.add(name);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String fromcity = (String) searchPageTable.getValueAt(i, 2);
            fromCity.add(fromcity);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String tocity = (String) searchPageTable.getValueAt(i, 3);
            toCity.add(tocity);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String date = (String) searchPageTable.getValueAt(i, 4);
            flightDate.add(date);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String time = (String) searchPageTable.getValueAt(i, 5);
            flightTime.add(time);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String capacity = (String) searchPageTable.getValueAt(i, 6);
            flightCapacity.add(capacity);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String flightclass = (String) searchPageTable.getValueAt(i, 7);
            flightClass.add(flightclass);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String price = (String) searchPageTable.getValueAt(i, 8);
            flightPrice.add(price);
        }
        
        for (int i = 0; i < rowIndex; i++) {
            String description = (String) searchPageTable.getValueAt(i, 9);
            flightDescription.add(description);
        }
    
        //For loop to iterate if the user input of price matches any data in flightPrice array list.
        for (int i = 0; i < flightPrice.size(); i++) {
            
            if (flightPrice.get(i).equals(userInput)) {
                //Create a sorted array if the user input is valid.
                initialIndex = i;
                importVar.selectionSort(flightPrice);
                break;
            }
        } 
        
        //Using binary search to search for the respective flight details of the user's price input.
        int low = 0;
        int high = flightPrice.size() - 1;
        int binaryResult = importVar.binarySearch(flightPrice, low, high, userInput);
        finalIndex = binaryResult;
        
        if(finalIndex != -1)
        {
                String fcode = flightCode.set(initialIndex, flightCode.get(finalIndex));
                String fname = flightName.set(initialIndex, flightName.get(finalIndex));
                String fromcity = fromCity.set(initialIndex, fromCity.get(finalIndex));
                String tocity = toCity.set(initialIndex, toCity.get(finalIndex));
                String date = flightDate.set(initialIndex, flightDate.get(finalIndex));
                String time = flightTime.set(initialIndex, flightTime.get(finalIndex));
                String capacity = flightCapacity.set(initialIndex, flightCapacity.get(finalIndex));
                String fclass = flightClass.set(initialIndex, flightClass.get(finalIndex));
                String price = flightPrice.set(initialIndex, flightPrice.get(finalIndex));
                String description = flightDescription.set(initialIndex, flightDescription.get(finalIndex)); 
                //Showing a message box with flight details.
                JOptionPane.showMessageDialog(this, "SEARCH FOUND FOR INPUT PRICE OF "+userInput+".\n Flight Code:\t"+fcode+"\n Flight Name:\t"+fname+"\n Destination:\t"
                        +tocity+"\n Departure:\t"+date+" ("+time+")");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Search Not Found");
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void airlinesISHeadingLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airlinesISHeadingLabelMouseClicked
        try {
            dispose();
            HomePage var = new HomePage();
            var.setVisible(true);
        } 
        catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_airlinesISHeadingLabelMouseClicked

    private void airlinesISHeadingLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airlinesISHeadingLabelMouseEntered
        airlinesISHeadingLabel.setFont(new Font("Times New Roman", Font.BOLD, 38));
    }//GEN-LAST:event_airlinesISHeadingLabelMouseEntered

    private void airlinesISHeadingLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airlinesISHeadingLabelMouseExited
        airlinesISHeadingLabel.setFont(new Font("Times New Roman", Font.BOLD, 35));
    }//GEN-LAST:event_airlinesISHeadingLabelMouseExited

    private void loginNavigationLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginNavigationLabelMouseClicked
        dispose();
        Login var = new Login();
        var.setVisible(true);
    }//GEN-LAST:event_loginNavigationLabelMouseClicked

    private void loginNavigationLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginNavigationLabelMouseEntered
        loginNavigationLabel.setFont(new Font("Times New Roman", Font.BOLD, 20));
    }//GEN-LAST:event_loginNavigationLabelMouseEntered

    private void loginNavigationLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginNavigationLabelMouseExited
        loginNavigationLabel.setFont(new Font("Times New Roman", Font.BOLD, 18));
    }//GEN-LAST:event_loginNavigationLabelMouseExited

    private void searchNavigationLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchNavigationLabelMouseEntered
        searchNavigationLabel.setFont(new Font("Times New Roman", Font.BOLD, 20));
    }//GEN-LAST:event_searchNavigationLabelMouseEntered

    private void searchNavigationLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchNavigationLabelMouseExited
        searchNavigationLabel.setFont(new Font("Times New Roman", Font.BOLD, 18));
    }//GEN-LAST:event_searchNavigationLabelMouseExited

    private void exitNavigationLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitNavigationLabelMouseClicked
        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirm", JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitNavigationLabelMouseClicked

    private void exitNavigationLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitNavigationLabelMouseEntered
        exitNavigationLabel.setFont(new Font("Times New Roman", Font.BOLD, 20));
    }//GEN-LAST:event_exitNavigationLabelMouseEntered

    private void exitNavigationLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitNavigationLabelMouseExited
        exitNavigationLabel.setFont(new Font("Times New Roman", Font.BOLD, 18));
    }//GEN-LAST:event_exitNavigationLabelMouseExited

    private void picturedLabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_picturedLabelPropertyChange

    }//GEN-LAST:event_picturedLabelPropertyChange

    private void searchNavigationLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchNavigationLabelMouseClicked
        try {
            dispose();
            Search var = new Search();
            var.setVisible(true);
        } 
        catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_searchNavigationLabelMouseClicked

    //This method finds the number of flights that are stored whose detail matches the user input.
    private void searchClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchClassButtonActionPerformed
        if(searchClassComboBox.getSelectedIndex() == 0) {
               JOptionPane.showMessageDialog(this, "Please select a class");
        }
        else {
            String userChoice = (String) searchClassComboBox.getSelectedItem();
            int count = 0;
            boolean b = false;
            
            ArrayList<String> record = new ArrayList<String>();
            
            int rowCount = searchPageTable.getRowCount();
            int rowIndex = 0;
            boolean isEmpty = false;
            
            //do while loop for counting the number of rows with details
            do {
                String var = (String) searchPageTable.getValueAt(rowIndex, 0);
                
                if(var != null && var.length()!=0) {
                    rowIndex++;
                }
                else{
                    isEmpty = true;
                }
            }
            while(rowIndex<rowCount && !isEmpty);
            
            //For loop for adding the details of 7th index column.
            for(int i = 0; i < rowIndex; i++) {
                record.add((String) searchPageTable.getValueAt(i, 7));
            }
            
            //For loop for counting how many flights details matched with user input
            for(int i = 0; i<record.size(); i++) {
                
                if(userChoice.equals(record.get(i))) {
                    count++;
                }
            }
            
            if(count>0) {
                JOptionPane.showMessageDialog(this,count+ " flights have the provision of "+userChoice+" class flights.");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No flights have the provision of "+userChoice);
            }
        }
    }//GEN-LAST:event_searchClassButtonActionPerformed

    //This method finds the number of flights that are stored whose detail matches the user input.
    private void searchDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDestinationButtonActionPerformed
        if(searchDestinationComboBox.getSelectedIndex() == 0) {
               JOptionPane.showMessageDialog(this, "Please select a destination");
        }
        else {
            String userChoice = (String) searchDestinationComboBox.getSelectedItem();
            int count = 0;
            boolean b = false;
            
            ArrayList<String> record = new ArrayList<String>();
            
            int rowCount = searchPageTable.getRowCount();
            int rowIndex = 0;
            boolean isEmpty = false;
            
            //Do while loop for couting the number of rows with details.
            do {
                String var = (String) searchPageTable.getValueAt(rowIndex, 0);
                
                if(var != null && var.length()!=0) {
                    rowIndex++;
                }
                else{
                    isEmpty = true;
                }
            }
            while(rowIndex<rowCount && !isEmpty);
            
            //for loop for adding the 3rd index column in array list.
            for(int i = 0; i < rowIndex; i++) {
                record.add((String) searchPageTable.getValueAt(i, 3));
            }
            
            //for loop for counting how may flight details matched with user input
            for(int i = 0; i<record.size(); i++) {
                
                if(userChoice.equals(record.get(i))) {
                    count++;
                }
            }
            
            if(count>0) {
                JOptionPane.showMessageDialog(this,count + " flights are departuring to "+userChoice+".");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No flights are departuring to "+userChoice);
            }
        }
    }//GEN-LAST:event_searchDestinationButtonActionPerformed

    private void aboutMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuitemActionPerformed
        try{
            URI link = new URI("https://drive.google.com/file/d/1SiBFresB3Ftddgo9-YTJS3opDCFjYjU5/view?usp=sharing");
            Desktop var = Desktop.getDesktop();
            var.browse(link);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Sorry for trouble! We are having an issue. Please check back later");
        }
    }//GEN-LAST:event_aboutMenuitemActionPerformed

    private void exitMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuitemActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirm", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuitemActionPerformed

    private void existingFileMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingFileMenuitemActionPerformed
        try {
            Search var = new Search();
            var.setVisible(true);

            BufferedReader file = new BufferedReader(new FileReader(new File(".\\dataWhileOpenExistingFile.csv")));

            ArrayList<String[]> record = new ArrayList<String[]>();
            String line = null;
            int row = 0;

            while ((line = file.readLine()) != null) {

                if (row == 0) {
                    row++;
                    continue;
                }
                String[] splitted = line.split(",");
                record.add(splitted);
            }
            file.close();

            for(String[] data: record)
            {
                tab.addRow(new Object[]{});
                int col = 0;

                for(String subData: data)
                {
                    searchPageTable.setValueAt(subData, tab.getRowCount()-1, col);
                    col++;
                }
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_existingFileMenuitemActionPerformed

    private void newFileMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuitemActionPerformed
        try {
            HomePage var = new HomePage();
            var.setVisible(true);
        }
        catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newFileMenuitemActionPerformed

    //This method is for gui where on radio button selected, their respective components appear.
    private void searchClass_radioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchClass_radioButtonActionPerformed
        if(searchClass_radioButton.isSelected())
        {   
            searchClass_radioButton.setEnabled(false);
            searchClassComboBox.setVisible(true);
            searchClassButton.setVisible(true);
            
            searchDestination_radioButton.setEnabled(true);
            searchDestinationComboBox.setVisible(false);
            searchDestinationButton.setVisible(false);
        }
    }//GEN-LAST:event_searchClass_radioButtonActionPerformed

      //This method is for gui where on radio button selected, their respective components appear.
    private void searchDestination_radioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDestination_radioButtonActionPerformed
        if(searchDestination_radioButton.isSelected())
        {   
            searchClass_radioButton.setEnabled(true);
            searchClassComboBox.setVisible(false);
            searchClassButton.setVisible(false);
            
            searchDestination_radioButton.setEnabled(false);
            searchDestinationComboBox.setVisible(true);
            searchDestinationButton.setVisible(true);
        }
    }//GEN-LAST:event_searchDestination_radioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Search().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuitem;
    private javax.swing.JLabel airlinesISHeadingLabel;
    private javax.swing.JPanel blackPanel;
    private javax.swing.JLabel contentHeadingLabel;
    private javax.swing.JMenuItem existingFileMenuitem;
    private javax.swing.JMenuItem exitMenuitem;
    private javax.swing.JLabel exitNavigationLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel loginNavigationLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newFileMenuitem;
    private javax.swing.JLabel picturedLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchByPanel;
    private javax.swing.ButtonGroup searchBy_ButtonGroup;
    private javax.swing.JButton searchClassButton;
    private javax.swing.JComboBox<String> searchClassComboBox;
    private javax.swing.JRadioButton searchClass_radioButton;
    private javax.swing.JPanel searchContentPanel;
    private javax.swing.JButton searchDestinationButton;
    private javax.swing.JComboBox<String> searchDestinationComboBox;
    private javax.swing.JRadioButton searchDestination_radioButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchNavigationLabel;
    public javax.swing.JTable searchPageTable;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration//GEN-END:variables
}
